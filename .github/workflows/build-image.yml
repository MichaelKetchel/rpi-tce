
name: Build image

on:
  # Allow manual runs of workflow from Actions tab
  workflow_dispatch:
    inputs:
      version-bump:
        description: Version bump
        required: true
        type: choice
        options:
          - Auto
          - Major
          - Minor
          - Patch
          - RC
          - Dev
          - Release
        default: Auto

#  schedule:
#    - cron: '37 5 * * *'
  push:
    branches:
      - main
      - dev
      - rgnets
      - rgnets-dev

env:
  TARGET_KERNEL: 6.1.68

jobs:

  build-kernel:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: "${{ vars.RUNS_ON || 'ubuntu-22.04' }}"
    steps:
      - uses: LIT-Protocol/artifact-exists-action@v0
        id: check_exists
        with:
          name: "kernel-${{TARGET_KERNEL}}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Check for kernel-related changes
        id: check_changes
        run: |
          if [[ "${{ steps.check_exists.outputs.exists }}" == false ]] || git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -qE "^(kernel/)"; then
            echo "build_kernel=true" >> $GITHUB_ENV
          else
            echo "build_kernel=false" >> $GITHUB_ENV
          fi

      - name: Get Kernel Sources
        if: env.build_kernel == 'true'
        id: get-kernel-sources
        run: |
          ./kernel/get_sources.sh
          ls
          ls ./kernel/

      - name: Unpack Sources
        if: env.build_kernel == 'true'
        id: unpack-sources
        run: |
          cd kernel
          mkdir -p kernel_source
          tar -C kernel_source/ -xvf sources/rpi-linux-6.1.68.tar.xz 
          git clone --depth=1 --branch rpi-6.1.y https://github.com/raspberrypi/linux

      - name: Install Dependencies
        if: env.build_kernel == 'true'
        id: install-deps
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get -yq install gcc-aarch64-linux-gnu

      - name: Build Kernel Sources
        if: env.build_kernel == 'true'
        id: build-kernel-sources
        run: ./kernel/build_kernel.sh

      - name: Upload image
        if: env.build_kernel == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: "kernel-${{TARGET_KERNEL}}"
          path: ./kernel
          retention-days: 30



  build-image:
    needs: build-kernel
    runs-on: "${{ vars.RUNS_ON || 'ubuntu-22.04' }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
#      - name: Install Dependencies
#        id: install-deps
#        run: |
#          export DEBIAN_FRONTEND=noninteractive
#          sudo apt-get -yq install gcc-aarch64-linux-gnu
#
#
      - name: Download kernel artifact
        uses: actions/download-artifact@v4
        with:
          name: "kernel-${{TARGET_KERNEL}}"
          path: ./kernel

      - name: Build image
        id: build-image
        run: |
          last_commit_date=$(git log -1 --format=%cd --date=unix)
          last_day=$(date -d '-1 day' +%s)
          
          sudo -E ./scripts/build_image_with_docker.sh

      - name: Generate checksum
        id: generate-checksum
        run: |
          cd work; for file in *.img.gz; do sha256sum --binary $file | sudo tee "${file}.sha256"; done; cd ../

      - name: Get current date
        id: date
        run: echo "date=$(date -u +'%Y%m%d')" >> $GITHUB_ENV

      - name: Set hash
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set nightly artifact name
        id: set-nightly-artifact-name
        #run: echo "ARTIFACT_NAME=wlanpi-nightly-${{ env.version }}~gha${{ env.date }}" >> $GITHUB_ENV
        run: echo "ARTIFACT_NAME=rg-loader-ondemand-${{ env.sha_short }}~gha${{ env.date }}" >> $GITHUB_ENV

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          #name: ${{ env.ARTIFACT_NAME }}
          path: |
            work/rg-piCore64*.gz
            work/rg-piCore64*.sha256
            scripts/add_os_to_base_image.py
            scripts/requirements.txt
            docker/builder
